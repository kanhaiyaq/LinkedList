import java.util.*;
import java.io.*;

public class Main
{
    public static class Node 
    {
        int data;
        Node next;
    }
    public static class LinkedList
    {
        Node head;
        Node tail;
        int size;
        void addLast(int val)
        {
            Node temp=new Node();
            temp.data=val;
            temp.next=null;
            if(size==0)
            {
                head=tail=temp;
            }
            else{
                tail.next=temp;
                tail=temp;
            }
            size++;
        }
        public int size()
        {
            return size;
        }
        public  void display()
        {
            for(Node temp=head;temp!=null;temp=temp.next)
            {
                System.out.print(temp.data);
            }
            System.out.println();
        }
        public void removeFirst()
        {
            if(size==0)
            {
                System.out.println("list is Empty");
            }
            else if(size==1){
                head=tail=null;
                size=0;
            }
            else{
                head=head.next;
                size--;
            }
        }
        public void getFirst()
        {
            if(size==0)
            {
               System.out.println("List is Empty");
               
            }
            else {
            System.out.println(head.data);}
        }
        public void getLast()
        {
             if(size==0)
            {
               System.out.println("List is Empty");
               
            }
            else {
            System.out.println(tail.data);}
        }
        public void getAt(int index)
        {
            if(size==0)
            {
                System.out.println("List is Empty");
            }
            else if(index<0||index>=size)
            {
                System.out.println("Invalid arguments");
            }
            else{
            Node temp=head;
           
            for(int i=0;i<index;i++)
            {
                temp=temp.next;
            }
            // while(index>0)
            // {
            //     temp=temp.next;
            //     index--;
            // }
            System.out.println(temp.data);
                
            }
        }
        public void addFirst(int val)
        {
            Node temp=new Node();
            temp.data=val;
            temp.next=head;
            head=temp;
            
            if(size==0)
            {
                tail=temp;
            }
           
            size++;
        }
        public void addAt(int index,int val)
        {
            Node temp=new Node();
            temp.data=val;
            
            Node temp1=head;
            if(index<0||index>size)
            {
              System.out.println("Invalid arguments");
            }else if(index == 0){
             addFirst(val);
            } else if(index == size){
                addLast(val);
            }else{
                for(int i=0;i<index;i++)
                {
                    temp1=temp1.next;
                }
                temp.next=temp1.next;
                temp1.next=temp;
               size++;
                
                }
            }
            
        public void removeLast()
        {
            if(size==0)
            {
                System.out.println("List is Empty");
            }
            else if(size==1)
            {
                head=tail=null;
                size=0;
            }
            else{
                Node temp=head;
                for(int i=0;i<size-2;i++)
                {
                    temp=temp.next;
                }
                tail=temp;
                tail.next=null;
                size--;
            }
        }
        public void removeAt(int index)
        {
             if (index < 0 || index >= size) {
                System.out.println("Invalid arguments");
             }
            else if(index==0)
            {
                removeFirst();
            }
            else if(index==size-1)
            {
                 removeLast();
            }
            else{
                Node temp=head;
            for(int i=0;i<index;i++)
            {
                temp=temp.next;
            }
            temp.next=temp.next.next;
            size--;
            }
            
        }
        
        }
        
    
    public static void testlist(LinkedList list)
    {
        for(Node temp=list.head;temp!=null;temp=temp.next)
        {
            System.out.println(temp.data);
        }
    }
	public static void main(String[] args)throws Exception {
	
	    BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
	    LinkedList list=new LinkedList();
	    String str=br.readLine();
	    while(str.equals("quit")==false)
	    {
	        String[] parts=str.split(" ");
	        if(str.startsWith("addLast"))
	        {
	            list.addLast(Integer.parseInt(parts[1]));
	        }
	        else if(str.equals("display"))
	        {
	            list.display();
	        }
	        else if(str.equals("size"))
	        {
	           System.out.println(list.size());
	        }
	        else if(str.equals("removeFirst"))
	        {
	            list.removeFirst();
	        }
	        else if(str.equals("getFirst"))
	        {
	            list.getFirst();
	        }
	        else if(str.equals("getLast"))
	        {
	            list.getLast();
	        }
	        else if(str.startsWith("getAt"))
	        {
	            list.getAt(Integer.parseInt(parts[1]));
	        }
	        else if(str.startsWith("addFirst"))
	        {
	            list.addFirst(Integer.parseInt(parts[1]));
	        }
	        else if(str.startsWith("addAt"))
	        {
	            list.addAt(Integer.parseInt(parts[1]),Integer.parseInt(parts[2]));
	        }
	        else if(str.startsWith("removeLast"))
	        {
	            list.removeLast();
	        }
	        else if(str.startsWith("removeAt"))
	        {
	            list.removeAt(Integer.parseInt(parts[1]));
	        }
	        str=br.readLine();
	    }
	   // testlist(list);
	}
}
